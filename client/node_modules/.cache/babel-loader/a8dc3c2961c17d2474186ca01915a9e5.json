{"ast":null,"code":"\"use strict\";\n\nconst config = require('./config');\nconst axios = require('axios');\nconst DEFAULT_ENGINE = \"davinci\";\nclass OpenAI {\n  constructor(api_key) {\n    this._api_key = api_key;\n  }\n  _send_request(url, method) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let camelToUnderscore = key => {\n      let result = key.replace(/([A-Z])/g, \" $1\");\n      return result.split(' ').join('_').toLowerCase();\n    };\n    const data = {};\n    for (const key in opts) {\n      data[camelToUnderscore(key)] = opts[key];\n    }\n    return axios({\n      url,\n      headers: {\n        'Authorization': `Bearer ${this._api_key}`,\n        'Content-Type': 'application/json'\n      },\n      data: Object.keys(data).length ? data : '',\n      method\n    });\n  }\n  _check_embeddings_engine_name(engine) {\n    const availableEngineNames = ['text-similarity-ada-001', 'text-similarity-babbage-001', 'text-similarity-curie-001', 'text-similarity-davinci-001', 'text-search-ada-doc-001', 'text-search-ada-query-001', 'text-search-babbage-doc-001', 'text-search-babbage-query-001', 'text-search-curie-doc-001', 'text-search-curie-query-001', 'text-search-davinci-doc-001', 'text-search-davinci-query-001', 'code-search-ada-code-001', 'code-search-ada-text-001', 'code-search-babbage-code-001', 'code-search-babbage-text-001'];\n    if (!availableEngineNames.includes(engine)) {\n      throw new Error(`Unknown engine name for embeddings. Available engine names are ${availableEngineNames}`);\n    }\n  }\n  complete(opts) {\n    const url = config.completionURL(opts.engine || DEFAULT_ENGINE);\n    delete opts.engine;\n    return this._send_request(url, 'post', opts);\n  }\n  encode() {\n    // This method is no longer supported in Node>=v14. See\n    return Promise.resolve(new Array(2047).fill(\"\"));\n  }\n  search(opts) {\n    const url = config.searchURL(opts.engine || DEFAULT_ENGINE);\n    delete opts.engine;\n    return this._send_request(url, 'post', opts);\n  }\n  answers(opts) {\n    const url = config.answersUrl();\n    return this._send_request(url, 'post', opts);\n  }\n  classification(opts) {\n    const url = config.classificationsUrl();\n    return this._send_request(url, \"post\", opts);\n  }\n  engines() {\n    const url = config.enginesUrl();\n    return this._send_request(url, 'get');\n  }\n  engine(engine) {\n    const url = config.engineUrl(engine);\n    return this._send_request(url, 'get');\n  }\n  embeddings(opts) {\n    this._check_embeddings_engine_name(opts.engine);\n    const url = config.embeddingsUrl(opts.engine);\n    return this._send_request(url, 'post', opts);\n  }\n}\nmodule.exports = OpenAI;","map":{"version":3,"names":["config","require","axios","DEFAULT_ENGINE","OpenAI","constructor","api_key","_api_key","_send_request","url","method","opts","camelToUnderscore","key","result","replace","split","join","toLowerCase","data","headers","Object","keys","length","_check_embeddings_engine_name","engine","availableEngineNames","includes","Error","complete","completionURL","encode","Promise","resolve","Array","fill","search","searchURL","answers","answersUrl","classification","classificationsUrl","engines","enginesUrl","engineUrl","embeddings","embeddingsUrl","module","exports"],"sources":["C:/Users/Alexander/Desktop/PI-Pokemon-main/client/node_modules/openai-api/index.js"],"sourcesContent":["\"use strict\";\n\nconst config = require('./config');\nconst axios = require('axios');\n\nconst DEFAULT_ENGINE = \"davinci\";\n\nclass OpenAI {\n  constructor(api_key) {\n    this._api_key = api_key;\n  }\n\n  _send_request(url, method, opts = {}) {\n    let camelToUnderscore = (key) => {\n      let result = key.replace(/([A-Z])/g, \" $1\");\n      return result.split(' ').join('_').toLowerCase();\n    };\n\n    const data = {};\n    for (const key in opts) {\n      data[camelToUnderscore(key)] = opts[key];\n    }\n\n    return axios({\n      url,\n      headers: {\n        'Authorization': `Bearer ${this._api_key}`,\n        'Content-Type': 'application/json'\n      },\n      data: Object.keys(data).length ? data : '',\n      method,\n    });\n  }\n\n  _check_embeddings_engine_name(engine) {\n    const availableEngineNames = [\n      'text-similarity-ada-001',\n      'text-similarity-babbage-001',\n      'text-similarity-curie-001',\n      'text-similarity-davinci-001',\n      'text-search-ada-doc-001',\n      'text-search-ada-query-001',\n      'text-search-babbage-doc-001',\n      'text-search-babbage-query-001',\n      'text-search-curie-doc-001',\n      'text-search-curie-query-001',\n      'text-search-davinci-doc-001',\n      'text-search-davinci-query-001',\n      'code-search-ada-code-001',\n      'code-search-ada-text-001',\n      'code-search-babbage-code-001',\n      'code-search-babbage-text-001',\n    ];\n\n    if (!availableEngineNames.includes(engine)) {\n      throw new Error(`Unknown engine name for embeddings. Available engine names are ${availableEngineNames}`);\n    }\n  }\n\n  complete(opts) {\n    const url = config.completionURL(opts.engine || DEFAULT_ENGINE);\n    delete opts.engine;\n\n    return this._send_request(url, 'post', opts);\n  }\n\n  encode() {\n    // This method is no longer supported in Node>=v14. See\n    return Promise.resolve(new Array(2047).fill(\"\"));\n  }\n\n  search(opts) {\n    const url = config.searchURL(opts.engine || DEFAULT_ENGINE);\n    delete opts.engine;\n    return this._send_request(url, 'post', opts);\n  }\n\n  answers(opts) {\n    const url = config.answersUrl();\n    return this._send_request(url, 'post', opts);\n  }\n\n  classification(opts) {\n    const url = config.classificationsUrl();\n    return this._send_request(url, \"post\", opts);\n  }\n\n  engines() {\n    const url = config.enginesUrl();\n    return this._send_request(url, 'get');\n  }\n\n  engine(engine) {\n    const url = config.engineUrl(engine);\n    return this._send_request(url, 'get');\n  }\n\n  embeddings(opts) {\n    this._check_embeddings_engine_name(opts.engine);\n\n    const url = config.embeddingsUrl(opts.engine);\n    return this._send_request(url, 'post', opts);\n  }\n}\n\nmodule.exports = OpenAI;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}